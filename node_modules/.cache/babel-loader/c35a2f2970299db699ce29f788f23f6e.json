{"ast":null,"code":"var _jsxFileName = \"/Users/chitrakannanb/Documents/ReactLearning/DummyLogin/01-starting-project/src/components/Login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer, useState } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EmailReducer = (state, actions) => {\n  if (actions.type === \"USER_EMAIL\") {\n    return {\n      value: actions.val,\n      isValid: actions.val.includes(\"@\")\n    };\n  }\n\n  if (actions.type === \"EMAIL_INPUT_BLUR\") return {\n    value: state.value,\n    isValid: state.value.includes(\"@\")\n  };\n};\n\n_c = EmailReducer;\n\nconst PasswordReducer = (state, actions) => {\n  if (actions.type === \"USER_PWD\") {\n    return {\n      value: actions.val,\n      isValid: actions.val.length > 6\n    };\n  }\n\n  if (actions.type === \"PWD_INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.length > 6\n    };\n  }\n};\n\n_c2 = PasswordReducer;\n\nconst Login = props => {\n  _s();\n\n  const [formIsValid, setFormIsValid] = useState(false); //In this Use Effect, we uses timeOut to check the form validity once in a while. Without timeout, form validity\n  //will be executed for all the keystrokes. With the below code, it will execute every 500ms if the user is not typing.\n  //if the user continues to type, it will keep clearing the timeout so that the 500ms will be reseted for every stroke\n  // and the form validity function will not execute until the user stops typing.\n\n  useEffect(() => {\n    const timerID = setTimeout(() => {\n      setFormIsValid(emailValid && passwordValid);\n    }, 500);\n    return () => {\n      clearTimeout(timerID);\n    };\n  }, [emailValid, passwordValid]); //Above code is commented to manage the states using reducer.\n  //useReducer helps to manage multiple states.\n\n  const [emailState, dispatchEmail] = useReducer(EmailReducer, {\n    value: \"\",\n    isValid: null\n  });\n  const [passwordState, dispatchPassword] = useReducer(PasswordReducer, {\n    value: \"\",\n    isValid: null\n  });\n\n  const emailChangeHandler = event => {\n    dispatchEmail({\n      type: \"USER_EMAIL\",\n      val: event.target.value\n    }); // setFormIsValid(emailState.isValid && passwordState.isValid);\n  };\n\n  const passwordChangeHandler = event => {\n    dispatchPassword({\n      type: \"USER_PWD\",\n      val: event.target.value\n    }); // setFormIsValid(emailState.isValid && passwordState.isValid);\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: \"EMAIL_INPUT_BLUR\"\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({\n      type: \"PWD_INPUT_BLUR\"\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(emailState.value, passwordState.value);\n  };\n\n  const {\n    isValid: emailValid\n  } = emailState;\n  const {\n    isValid: passwordValid\n  } = passwordState;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailState.isValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordState.isValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: passwordState.value,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"BHlgy3nP2xObFQh6eDt2P7FHzPA=\");\n\n_c3 = Login;\nexport default Login;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"EmailReducer\");\n$RefreshReg$(_c2, \"PasswordReducer\");\n$RefreshReg$(_c3, \"Login\");","map":{"version":3,"sources":["/Users/chitrakannanb/Documents/ReactLearning/DummyLogin/01-starting-project/src/components/Login/Login.js"],"names":["React","useEffect","useReducer","useState","Card","classes","Button","EmailReducer","state","actions","type","value","val","isValid","includes","PasswordReducer","length","Login","props","formIsValid","setFormIsValid","timerID","setTimeout","emailValid","passwordValid","clearTimeout","emailState","dispatchEmail","passwordState","dispatchPassword","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","btn"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer, useState } from \"react\";\n\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\n\nconst EmailReducer = (state, actions) => {\n  if (actions.type === \"USER_EMAIL\") {\n    return { value: actions.val, isValid: actions.val.includes(\"@\") };\n  }\n  if (actions.type === \"EMAIL_INPUT_BLUR\")\n    return { value: state.value, isValid: state.value.includes(\"@\") };\n};\n\nconst PasswordReducer = (state, actions) => {\n  if (actions.type === \"USER_PWD\") {\n    return { value: actions.val, isValid: actions.val.length > 6 };\n  }\n  if (actions.type === \"PWD_INPUT_BLUR\") {\n    return { value: state.value, isValid: state.value.length > 6 };\n  }\n};\n\nconst Login = (props) => {\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  //In this Use Effect, we uses timeOut to check the form validity once in a while. Without timeout, form validity\n  //will be executed for all the keystrokes. With the below code, it will execute every 500ms if the user is not typing.\n  //if the user continues to type, it will keep clearing the timeout so that the 500ms will be reseted for every stroke\n  // and the form validity function will not execute until the user stops typing.\n\n  useEffect(() => {\n    const timerID = setTimeout(() => {\n      setFormIsValid(emailValid && passwordValid);\n    }, 500);\n\n    return () => {\n      clearTimeout(timerID);\n    };\n  }, [emailValid, passwordValid]);\n\n  //Above code is commented to manage the states using reducer.\n\n  //useReducer helps to manage multiple states.\n\n  const [emailState, dispatchEmail] = useReducer(EmailReducer, {\n    value: \"\",\n    isValid: null,\n  });\n\n  const [passwordState, dispatchPassword] = useReducer(PasswordReducer, {\n    value: \"\",\n    isValid: null,\n  });\n\n  const emailChangeHandler = (event) => {\n    dispatchEmail({ type: \"USER_EMAIL\", val: event.target.value });\n\n    // setFormIsValid(emailState.isValid && passwordState.isValid);\n  };\n\n  const passwordChangeHandler = (event) => {\n    dispatchPassword({ type: \"USER_PWD\", val: event.target.value });\n    // setFormIsValid(emailState.isValid && passwordState.isValid);\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: \"EMAIL_INPUT_BLUR\",\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({ type: \"PWD_INPUT_BLUR\" });\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onLogin(emailState.value, passwordState.value);\n  };\n\n  const { isValid: emailValid } = emailState;\n  const { isValid: passwordValid } = passwordState;\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailState.isValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordState.isValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={passwordState.value}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}